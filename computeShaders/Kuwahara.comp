#version 450

layout (local_size_x = 16, local_size_y = 16) in;
layout(binding = 0, rgba8) uniform readonly image2D inputImage;
layout(binding = 1, rgba8) uniform image2D resultImage;

void main(){
	const int kernelRadius = 15;

	ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);

	vec4 m[8];
	vec3 s[8];

	float zeta = 2.0f/float(kernelRadius);
	float zeroCross = 0.58f;
	float sinZeroCross = sin(zeroCross);
	float eta = (zeta + cos(zeroCross)) / (sinZeroCross * sinZeroCross);

	for (int k = 0; k != 8; k++){
		m[k] = vec4(0.0f, 0.0f, 0.0f, 0.0f);
		s[k] = vec3(0.0f, 0.0f, 0.0f);
	}

	for (int y = -kernelRadius; y <= kernelRadius; y++){
		for (int x = -kernelRadius; x <= kernelRadius; x++){
			vec2 v = vec2(float(x), float(y)) / kernelRadius;
			//vec3 c = imageLoad(inputImage, ivec2(pixelCoords.x + v.x * gl_WorkGroupSize.x, pixelCoords.y + v.y * gl_WorkGroupSize.y)).rgb;
			vec3 c = imageLoad(inputImage, ivec2(pixelCoords.x + v.x * kernelRadius, pixelCoords.y + v.y * kernelRadius)).rgb;
			float sum = 0.0f;
			float w[8];
			float z, vxx, vyy;

			vxx = zeta - eta * v.x * v.y;
			vyy = zeta - eta * v.y * v.x;
			z = max(0, v.y + vxx);
			w[0] = z * z;
			sum += w[0];
			z = max(0, -v.x + vyy);
			w[2] = z * z;
			sum += w[2];
			z = max(0, -v.y + vxx);
			w[4] = z * z;
			sum += w[4];
			z = max(0, v.x + vyy); 
            w[6] = z * z;
            sum += w[6];
            v = sqrt(2.0f) / 2.0f * vec2(v.x - v.y, v.x + v.y);
            vxx = zeta - eta * v.x * v.x;
            vyy = zeta - eta * v.y * v.y;
            z = max(0, v.y + vxx); 
            w[1] = z * z;
            sum += w[1];
            z = max(0, -v.x + vyy); 
            w[3] = z * z;
            sum += w[3];
            z = max(0, -v.y + vxx); 
            w[5] = z * z;
            sum += w[5];
            z = max(0, v.x + vyy); 
            w[7] = z * z;
            sum += w[7];

			float g = exp(-3.125f * dot(v, v)) / sum;

			for (int k = 0; k < 8; k++){
				float wk = w[k] * g;
				m[k] += vec4(c * wk, wk);
				s[k] += vec3(c * c * wk);
			}
		}
	}

	vec4 avgPixel = vec4(0.0f, 0.0f, 0.0f, 0.0f);
	
	for (int k = 0; k < 8; k++){
		m[k].rgb /= m[k].w;
		s[k] = abs(s[k]/m[k].w - m[k].rgb * m[k].rgb);

		float sigma2 = s[k].r + s[k].g + s[k].b;
		float w = 1.0f / (1.0f + pow(1000.0f * sigma2, 4.0f));

		avgPixel += vec4(m[k].rgb * w, w);
	}

	vec4 pixel = (avgPixel / avgPixel.w);

	imageStore(resultImage, pixelCoords, pixel);
}